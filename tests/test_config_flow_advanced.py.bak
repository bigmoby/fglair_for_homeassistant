"""Test config flow with pytest-homeassistant-custom-component."""
from unittest.mock import AsyncMock, patch

import pytest
from homeassistant.core import HomeAssistant
from homeassistant.data_entry_flow import FlowResultType
from homeassistant.config_entries import SOURCE_USER
from pytest_homeassistant_custom_component.common import MockConfigEntry

from custom_components.fglair_heatpump_controller.const import DOMAIN


@pytest.mark.asyncio
async def test_config_flow_step_user_form(hass: HomeAssistant):
    """Test the initialization of the form in the first step of the config flow."""
    result = await hass.config_entries.flow.async_init(
        DOMAIN, context={"source": SOURCE_USER}
    )

    assert result["type"] == FlowResultType.FORM
    assert "data_schema" in result


@pytest.mark.asyncio
async def test_config_flow_step_user_valid_input(hass: HomeAssistant):
    """Test we advance to the next step when data is valid."""
    # 1) Mostra form
    result = await hass.config_entries.flow.async_init(
        DOMAIN, context={"source": SOURCE_USER}
    )
    assert result["type"] == FlowResultType.FORM

    user_input = {
        "username": "test_user",
        "password": "test_pass",
        "region": "eu",
        "tokenpath": "/tmp/test_token",
        "temperature_offset": 0.0,
    }

    with patch(
        "custom_components.fglair_heatpump_controller.config_flow.FGLairApiClient"
    ) as mock_client_class:
        mock_client = AsyncMock()
        mock_client.async_authenticate.return_value = True
        mock_client_class.return_value = mock_client

        # 2) Invia i dati utente al flow
        result2 = await hass.config_entries.flow.async_configure(
            result["flow_id"], user_input=user_input
        )

    assert result2["type"] == FlowResultType.CREATE_ENTRY
    assert result2["data"]["username"] == "test_user"


@pytest.mark.asyncio
async def test_config_flow_step_user_invalid_auth(hass: HomeAssistant):
    """Test errors populated when auth is invalid."""
    result = await hass.config_entries.flow.async_init(
        DOMAIN, context={"source": SOURCE_USER}
    )
    assert result["type"] == FlowResultType.FORM

    user_input = {
        "username": "test_user",
        "password": "wrong_pass",
        "region": "eu",
        "tokenpath": "/tmp/test_token",
        "temperature_offset": 0.0,
    }

    with patch(
        "custom_components.fglair_heatpump_controller.config_flow.FGLairApiClient"
    ) as mock_client_class:
        mock_client = AsyncMock()
        mock_client.async_authenticate.return_value = False
        mock_client_class.return_value = mock_client

        result2 = await hass.config_entries.flow.async_configure(
            result["flow_id"], user_input=user_input
        )

    assert result2["type"] == FlowResultType.FORM
    assert "errors" in result2 and "base" in result2["errors"]


@pytest.mark.asyncio
async def test_config_flow_step_user_exception(hass: HomeAssistant):
    """Test errors populated when exception occurs."""
    result = await hass.config_entries.flow.async_init(
        DOMAIN, context={"source": SOURCE_USER}
    )
    assert result["type"] == FlowResultType.FORM

    user_input = {
        "username": "test_user",
        "password": "test_pass",
        "region": "eu",
        "tokenpath": "/tmp/test_token",
        "temperature_offset": 0.0,
    }

    with patch(
        "custom_components.fglair_heatpump_controller.config_flow.FGLairApiClient"
    ) as mock_client_class:
        mock_client = AsyncMock()
        mock_client.async_authenticate.side_effect = Exception("Network error")
        mock_client_class.return_value = mock_client

        result2 = await hass.config_entries.flow.async_configure(
            result["flow_id"], user_input=user_input
        )

    assert result2["type"] == FlowResultType.FORM
    assert "errors" in result2 and "base" in result2["errors"]
