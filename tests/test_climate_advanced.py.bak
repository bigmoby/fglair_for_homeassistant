"""Test climate entity with pytest-homeassistant-custom-component."""
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from homeassistant.core import HomeAssistant
from pytest_homeassistant_custom_component.common import MockConfigEntry

from custom_components.fglair_heatpump_controller.climate import FujitsuClimate
from custom_components.fglair_heatpump_controller.const import (
    DEFAULT_TEMPERATURE_OFFSET,
    DEFAULT_TOKEN_PATH,
)


@pytest.mark.asyncio
async def test_climate_entity_async_update(hass: HomeAssistant):
    """Test climate entity async_update method."""
    mock_client = MagicMock()
    mock_coordinator = MagicMock()

    # Mock dei dati del dispositivo
    mock_device_data = {
        "get_device_name": MagicMock(return_value={"value": "Test Device"}),
        "get_current_temperature": MagicMock(return_value={"value": 22.0}),
        "get_target_temperature": MagicMock(return_value={"value": 23.0}),
        "get_hvac_mode": MagicMock(return_value={"value": "heat"}),
        "get_fan_mode": MagicMock(return_value={"value": "auto"}),
        "get_swing_mode": MagicMock(return_value={"value": "off"}),
        "get_preset_mode": MagicMock(return_value={"value": "comfort"}),
    }

    with patch("pyfujitsugeneral.splitAC.SplitAC", return_value=MagicMock(**mock_device_data)):
        climate = FujitsuClimate(
            fglair_api_client=mock_client,
            dsn="test-dsn",
            region="eu",
            tokenpath=DEFAULT_TOKEN_PATH,
            temperature_offset=DEFAULT_TEMPERATURE_OFFSET,
            hass=hass,
            coordinator=mock_coordinator,
        )

        # Test che l'entità sia creata correttamente
        assert climate is not None
        assert climate._dsn == "test-dsn"
        assert climate._region == "eu"


@pytest.mark.asyncio
async def test_climate_entity_properties(hass: HomeAssistant):
    """Test climate entity properties."""
    mock_client = MagicMock()
    mock_coordinator = MagicMock()

    # Mock dei dati del dispositivo
    mock_device_data = {
        "get_device_name": MagicMock(return_value={"value": "Test Device"}),
        "get_current_temperature": MagicMock(return_value={"value": 22.0}),
        "get_target_temperature": MagicMock(return_value={"value": 23.0}),
        "get_hvac_mode": MagicMock(return_value={"value": "heat"}),
        "get_fan_mode": MagicMock(return_value={"value": "auto"}),
        "get_swing_mode": MagicMock(return_value={"value": "off"}),
        "get_preset_mode": MagicMock(return_value={"value": "comfort"}),
    }

    with patch("pyfujitsugeneral.splitAC.SplitAC", return_value=MagicMock(**mock_device_data)):
        climate = FujitsuClimate(
            fglair_api_client=mock_client,
            dsn="test-dsn",
            region="eu",
            tokenpath=DEFAULT_TOKEN_PATH,
            temperature_offset=DEFAULT_TEMPERATURE_OFFSET,
            hass=hass,
            coordinator=mock_coordinator,
        )

        # Test delle proprietà base
        assert climate.name == "Test Device"
        assert climate.unique_id == "test-dsn"
        assert climate.should_poll is True
