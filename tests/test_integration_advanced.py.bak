"""Test integration setup with pytest-homeassistant-custom-component."""
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from homeassistant.core import HomeAssistant
from pytest_homeassistant_custom_component.common import MockConfigEntry

from custom_components.fglair_heatpump_controller.const import DOMAIN


@pytest.mark.asyncio
async def test_integration_setup_entry(hass: HomeAssistant):
    """Test integration setup entry."""
    config_entry = MockConfigEntry(
        domain=DOMAIN,
        unique_id="test-dsn",
        data={
            "username": "test_user",
            "password": "test_pass",
            "region": "eu",
            "tokenpath": "/tmp/test_token",
            "temperature_offset": 0.0,
        },
    )
    config_entry.add_to_hass(hass)

    with patch(
        "custom_components.fglair_heatpump_controller.FglairDataUpdateCoordinator"
    ) as mock_coordinator_class:
        mock_coordinator = MagicMock()
        mock_coordinator_class.return_value = mock_coordinator

        with patch(
            "custom_components.fglair_heatpump_controller.FGLairApiClient"
        ) as mock_client_class:
            mock_client = AsyncMock()
            mock_client_class.return_value = mock_client

            # Setup dell'integrazione
            result = await hass.config_entries.async_setup(config_entry.entry_id)

            assert result is True
            assert config_entry.entry_id in hass.data[DOMAIN]


@pytest.mark.asyncio
async def test_integration_unload_entry(hass: HomeAssistant):
    """Test integration unload entry."""
    config_entry = MockConfigEntry(
        domain=DOMAIN,
        unique_id="test-dsn",
        data={
            "username": "test_user",
            "password": "test_pass",
            "region": "eu",
            "tokenpath": "/tmp/test_token",
            "temperature_offset": 0.0,
        },
    )
    config_entry.add_to_hass(hass)

    # Simula il setup
    hass.data[DOMAIN] = {config_entry.entry_id: MagicMock()}

    # Test dell'unload
    result = await hass.config_entries.async_unload(config_entry.entry_id)

    assert result is True
    assert config_entry.entry_id not in hass.data[DOMAIN]
